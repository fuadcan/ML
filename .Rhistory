sent_data$Sent[sent_data$Sent == '+'] <- rep(1,nrow(sent_data))
sent_data <- ss
sent_data
sent_data$Sent[sent_data$Sent == '+']
sent_data$Sent <- as.character(sent_data$Sent)
sent_data$Sent[sent_data$Sent == '+'] <- rep(1,nrow(sent_data))
sent_data <- ss
sent_data$Sent <- as.character(sent_data$Sent)
sent_data$Sent
sent_data$Sent[sent_data$Sent == '+']
replace(sent_data$Sent,c('+','-'),c(1,0))
replace(sent_data$Sent,list = list('+','-'),c(1,0))
replace(sent_data$Sent,list = list('+','-'),list(1,0))
replace(sent_data$Sent,c('+','-'),c(1,0))
sent_data$Sent
replace(sent_data$Sent,'+',1)
replace(sent_data$Sent,sent_data$Sent=='+',1)
sent_data$Sent[sent_data$Sent == '+'] <- rep(1,sum(sent_data$Sent=='+'))
sent_data$Sent[sent_data$Sent == '-'] <- rep(0,sum(sent_data$Sent=='+'))
sent_data$Sent <- as.character(sent_data$Sent)
sent_data$Sent[sent_data$Sent == '+'] <- rep(1,sum(sent_data$Sent=='+'))
sent_data$Sent[sent_data$Sent == '-'] <- rep(0,sum(sent_data$Sent=='+'))
sent_data <- ss
sent_data$Sent <- as.character(sent_data$Sent)
sent_data$Sent[sent_data$Sent == '+'] <- rep(1,sum(sent_data$Sent=='+'))
sent_data$Sent[sent_data$Sent == '-'] <- rep(0,sum(sent_data$Sent=='-'))
sent_data
sent_data$Sen
sent_data$Sent
sent_data <- ss
sent_data$Sent <- as.character(sent_data$Sent)
sent_data$Sent <- replace(sent_data$Sent,'+',1)
sent_data$Sent <- replace(sent_data$Sent,'-',0)
sent_data <- ss
sent_data$Sent <- as.character(sent_data$Sent)
sent_data$Sent <- as.character(sent_data$Sent)
sent_data$Sent <- with(sent_data, replace(Sent,Sent=='+',1))
sent_data$Sent <- with(sent_data, replace(Sent,Sent=='-',0))
sent_data$Sent[sent_data$Sent == '+'] <- rep(1,sum(sent_data$Sent=='+'))
sent_data <- ss
sent_data$Sent <- as.character(sent_data$Sent)
sent_data$Sent <- with(sent_data, replace(Sent,Sent=='+',1))
sent_data$Sent <- with(sent_data, replace(Sent,Sent=='-',0))
sent_data
sent_data$Sent <- as.character(sent_data$Sent)
sent_data$Sent <- with(sent_data, replace(Sent,Sent=='+',1))
sent_data$Sent <- with(sent_data, replace(Sent,Sent=='-',0))
sent_data$Sent <- as.numeric(sent_data$Sent)
sent_data <- ss
sent_data$Sent <- as.character(sent_data$Sent)
sent_data$Sent <- with(sent_data, replace(Sent,Sent=='+',1))
sent_data$Sent <- with(sent_data, replace(Sent,Sent=='-',0))
sent_data$Sent <- as.numeric(sent_data$Sent)
glm(Sent~.,'binomial',sent_data)
fit <- glm(Sent~.,'binomial',sent_data)
plot(fit)
summary(fit)
fit <- glm(Sent~.,binomial(link='logit'),sent_data)
summary(fit)
fit <- glm(Sent~.,'binomial',sent_data)
summary(fit)
Hitters
library(tree)
library(ROCR)
library("ggplot2")
library("randomForest")
credit <- read.csv("E:/ML/data/german_credit.csv")
credit
Credit
Credit$Income
Credit$Limit
Credit$Rating
Credit$Balance
Credit$ID
credit <- read.csv("C:/Users/Bilgi/knime-workspace/Example Workflows/TheData/Credit/german-credit-scoring.csv",sep=";")
credit$Score
credit$Credit.amount
credit$Duration.in.months
credit$Telephone
credit.tree <- tree(Score ~ ., credit)
credit.tree
plot(credit.tree)
credit.tree <- rpart(Score ~ ., credit,method = "class")
library(rpart)
credit.tree <- rpart(Score ~ ., credit,method = "class")
credit.tree
plot(credit.tree)
credit.tree$splits
credit.tree$parms
credit.tree$where
credit.tree$call
credit.tree$terms
credit.tree$cptable
credit.tree$y
credit.tree$ordered
credit.tree$variable.importance
credit.tree$method
credit.tree$y
aa <- credit.tree$y
aa2 <- credit$Score
aa2
as.numeric(aa2)
aa2 <- as.numeric(aa2)
aa == aa2
sum(aa '= aa2)
sum(aa '= aa2)
sum(aa != aa2)
predict.credit <- predict(credit.tree)
predict.credit
printcp(credit.tree)
plotcp(credit.tree)
summary(credit.tree
)
rsq.rpart(credit.tree)
text(credit.tree)
prp(credit.tree)
prp.rpart(credit.tree)
install.packages(rattle)
install.packages("rattle")
install.packages("rpart.plot")
install.packages("RColorBrewer")
install.packages("party")
predict.credit <- predict(credit.tree)
predict.credit
library(rattle)
library(rpart.plot)				# Enhanced tree plots
prp(credit.tree)
credit$Status.of.existing.checking.account
install.packages("quanteda")
library (ISLR)
attach (Carseats)
Carseats
Carseats =data.frame(Carseats ,High)
High <- ifelse (Sales <=8," No"," Yes ")
Carseats =data.frame(Carseats ,High)
tree.carseats =tree(Highâˆ¼.-Sales ,Carseats )
tree.carseats
summary(tree.carseats)
prp(tree.carseats)
plot(tree.carseats)
text(tree.carseats)
plot(tree.carseats)
text(tree.carseats,pretty=0)
tree.carseats2 <- rpart(Highâˆ¼.-Sales ,Carseats,method="class")
summary(tree.carseats2)
summary(tree.carseats2)
tree.carseats2$cptable
tree.carseats2$frame
tree.carseats2$parms
tree.carseats2$control
tree.carseats2$csplit
tree.carseats2$cptable
prp(tree.carseats2)
predict(tree.carseats2)
predict(tree.carseats2)[,1]
predict(tree.carseats2)[,2]
predict(tree.carseats2)[,2]>.5
Carseats$High
predict(tree.carseats2)[,2]>.5
as.character(Carseats$High)
as.numeric(Carseats$High)
as.numeric(Carseats$High)-1
(as.numeric(Carseats$High)-1)==(predict(tree.carseats2)[,2]>.5)
mean((as.numeric(Carseats$High)-1)==(predict(tree.carseats2)[,2]>.5))
mean((as.numeric(Carseats$High)-1)==(predict(tree.carseats2)[,2]>.6))
mean((as.numeric(Carseats$High)-1)==(predict(tree.carseats2)[,2]>.7))
mean((as.numeric(Carseats$High)-1)==(predict(tree.carseats2)[,2]>.8))
mean((as.numeric(Carseats$High)-1)==(predict(tree.carseats2)[,2]>.5))
mean((as.numeric(Carseats$High)-1)==(predict(tree.carseats2)[,2]>.4))
mean((as.numeric(Carseats$High)-1)==(predict(tree.carseats2)[,2]>.3))
mean((as.numeric(Carseats$High)-1)==(predict(tree.carseats2)[,2]>.2))
train_carseats <- split_train_test(Carseats)
dim(Carseats)
train_carseats <- split_train_test(Carseats,.5)
test_carseats <- train_carseats[[2]]
train_carseats <- train_carseats[[1]]
train_carseats
tree.carseats3 <- tree(High~.-Sales, train_carseats)
tree.pred <- predict(tree.carseats3,test_carseats)
table(tree.pred, test_carseats$High)
test_carseats$High
tree.pred
tree.pred
tree.pred <- predict(tree.carseats3,test_carseats, type="class")
table(tree.pred, test_carseats$High)
crosstab <- table(tree.pred, test_carseats$High)
diag(crosstab)
sum(diag(crosstab))/200
cv.tree(tree.carseats,FUN=prune.misclass)
set.seed(3)
cv.tree(tree.carseats,FUN=prune.misclass)
cv.tree(tree.carseats3,FUN=prune.misclass)
cv.tree(tree.carseats3,FUN=prune.misclass)
pruned <- cv.tree(tree.carseats3,FUN=prune.misclass)
plot(pruned$size,pruned$dev,type='b')
pruned
plot(pruned$k,pruned$dev,type='b')
prune.carseats <- prune.misclass(tree.carseats, best=5)
plot(prune.carseats)
prune.carseats <- prune.misclass(tree.carseats, best=6)
plot(prune.carseats)
prune.carseats <- prune.misclass(tree.carseats, best=5)
plot(prune.carseats)
tree.pred <- predict(prune.carseats, test_carseats,type='class')
table(tree.pred,test_carseats$High)
confmat   <- table(tree.pred,test_carseats$High)
sum(diag(confmat))/sum(confmat)
prune.carseats <- prune.misclass(tree.carseats, best=10)
plot(prune.carseats)
tree.pred <- predict(prune.carseats, test_carseats,type='class')
confmat   <- table(tree.pred,test_carseats$High)
sum(diag(confmat))/sum(confmat)
pruned
prune.carseats <- prune.misclass(tree.carseats, best=11)
plot(prune.carseats)
tree.pred <- predict(prune.carseats, test_carseats,type='class')
confmat   <- table(tree.pred,test_carseats$High)
sum(diag(confmat))/sum(confmat)
prune.carseats <- prune.misclass(tree.carseats, best=5)
plot(prune.carseats)
tree.pred <- predict(prune.carseats, test_carseats,type='class')
confmat   <- table(tree.pred,test_carseats$High)
sum(diag(confmat))/sum(confmat)
prune.carseats <- prune.misclass(tree.carseats, best=4)
plot(prune.carseats)
tree.pred <- predict(prune.carseats, test_carseats,type='class')
confmat   <- table(tree.pred,test_carseats$High)
sum(diag(confmat))/sum(confmat)
prune.carseats <- prune.misclass(tree.carseats, best=11)
plot(prune.carseats)
tree.pred <- predict(prune.carseats, test_carseats,type='class')
confmat   <- table(tree.pred,test_carseats$High)
sum(diag(confmat))/sum(confmat)
prune.carseats <- prune.misclass(tree.carseats3, best=11)
prune.carseats
plot(prune.carseats)
tree.pred <- predict(prune.carseats, test_carseats,type='class')
confmat   <- table(tree.pred,test_carseats$High)
sum(diag(confmat))/sum(confmat)
prune.carseats <- prune.misclass(tree.carseats3, best=5)
plot(prune.carseats)
tree.pred <- predict(prune.carseats, test_carseats,type='class')
confmat   <- table(tree.pred,test_carseats$High)
sum(diag(confmat))/sum(confmat)
prune.carseats <- prune.misclass(tree.carseats3, best=6)
plot(prune.carseats)
tree.pred <- predict(prune.carseats, test_carseats,type='class')
confmat   <- table(tree.pred,test_carseats$High)
sum(diag(confmat))/sum(confmat)
prune.carseats <- prune.misclass(tree.carseats3, best=4)
plot(prune.carseats)
tree.pred <- predict(prune.carseats, test_carseats,type='class')
confmat   <- table(tree.pred,test_carseats$High)
sum(diag(confmat))/sum(confmat)
prune.carseats <- prune.misclass(tree.carseats3, best=3)
plot(prune.carseats)
tree.pred <- predict(prune.carseats, test_carseats,type='class')
confmat   <- table(tree.pred,test_carseats$High)
sum(diag(confmat))/sum(confmat)
prune.carseats <- prune.misclass(tree.carseats3, best=5)
plot(prune.carseats)
tree.pred <- predict(prune.carseats, test_carseats,type='class')
confmat   <- table(tree.pred,test_carseats$High)
sum(diag(confmat))/sum(confmat)
tree.pred <- predict(tree.carseats3, test_carseats,type='class')
confmat   <- table(tree.pred,test_carseats$High)
sum(diag(confmat))/sum(confmat)
prune.carseats <- prune.misclass(tree.carseats3, best=5)
plot(prune.carseats)
tree.pred <- predict(prune.carseats, test_carseats,type='class')
confmat   <- table(tree.pred,test_carseats$High)
sum(diag(confmat))/sum(confmat)
train_boston <- split_train_test(Boston,.5,1)
test_boston  <- train_boston[[2]];train_boston  <- train_boston[[1]];
tree.boston  <- tree(medvâˆ¼.,train_boston)
summary (tree.boston )
plot(tree.boston)
text(tree.boston)
# Regression Tree
library (MASS)
set.seed (1)
train_boston <- split_train_test(Boston,.5,1)
test_boston  <- train_boston[[2]];train_boston  <- train_boston[[1]];
tree.boston  <- tree(medvâˆ¼.,train_boston)
summary (tree.boston )
plot(tree.boston)
text(tree.boston)
plot(tree.boston)
text(tree.boston)
?Boston
cv.boston =cv.tree(tree.boston )
cv.boston
plot(cv.boston$size ,cv.boston$dev ,type=â€™bâ€™)
cv.boston <- cv.tree(tree.boston )
plot(cv.boston$size ,cv.boston$dev ,type=â€™bâ€™)
cv.boston$size
cv.boston$dev
plot(cv.boston$size, cv.boston$dev ,type='b')
preds <- predict(tree.boston,test_boston)
plot(preds,boston_test)
plot(preds,test_boston)
test_boston
plot(preds,test_boston$medv)
abline(0,1)
mean((preds-test_boston$medv)^2)
# Bagging
library(randomForest)
ncol(boston_test)
bag.boston <- randomForest(medvâˆ¼.,data=train_boston, mtry=ncol(train_boston)-1, importance =TRUE)
bag.boston
preds <- predict(bag.boston,test_boston)
plot(preds,test_boston$medv)
abline(0,1)
mean((preds-test_boston$medv)^2) # model estimates with around $5000 error
set.seed (1)
sqrt(12)
sqrt(13)
forest.boston <- randomForest(medvâˆ¼.,data=Boston, mtry=6, importance =TRUE)
pred.forest <- predict (forest.boston ,newdata =test_boston)
mean(( yhat.rf -boston .test)^2)
mean(( pred.forst -test_boston$medv)^2)
mean(( pred.forest -test_boston$medv)^2)
forest.boston
mean(( pred.forest -test_boston$medv)^2)
importance(forest.boston)
forest.boston
forest.boston$importance
varImpPlot(forest.boston)
forest.boston$importance
# Boosting
install.packages("gbm")
# Boosting
library("gbm")
boost.boston <- gbm(medv~.,data = train_boston, distribution = 'gaussian',ntrees=5000, interaction.depth = 4)
boost.boston <- gbm(medv~.,data = train_boston, distribution = 'gaussian',n.trees=5000, interaction.depth = 4)
summary(boost.boston)
par(mfrow =c(1,2))
plot(boost.boston ,i="rm")
plot(boost.boston ,i=" lstat ")
plot(boost.boston ,i="lstat")
preds.boost <- predict(boost.boston, test_boston)
preds.boost <- predict(boost.boston, test_boston,n.trees = 5000)
mean((preds-test_boston$medv)^2)
mean(( pred.forest -test_boston$medv)^2)
preds.bag <- predict(bag.boston,test_boston)
plot(preds,test_boston$medv)
mean((preds-test_boston$medv)^2) # model estimates with around $5000 error
mean((preds.boost-test_boston$medv)^2)
pred.forest
boost.boston <- gbm(medv~.,data = train_boston, distribution = 'gaussian',n.trees=5000, interaction.depth = 4,shrinkage = .2)
summary(boost.boston)
boost.boston
boost.boston$shrinkage
boost.boston <- gbm(medv~.,data = train_boston, distribution = 'gaussian',n.trees=5000, interaction.depth = 4)
boost.boston$shrinkage
boost.boston <- gbm(medv~.,data = train_boston, distribution = 'gaussian',n.trees=5000, interaction.depth = 4,shrinkage = .2)
plot(boost.boston ,i="rm")
plot(boost.boston ,i="lstat")
preds.boost <- predict(boost.boston, test_boston,n.trees = 5000)
mean((preds.boost-test_boston$medv)^2)
boost.boston <- gbm(medv~.,data = train_boston, distribution = 'gaussian',n.trees=5000, interaction.depth = 4)
preds.boost <- predict(boost.boston, test_boston,n.trees = 5000)
mean((preds.boost-test_boston$medv)^2)
length(test_boston)
dim(test_boston)
install.packages("e1071")
library("e1071")
sent_data
svm(Sent~ ., sent_data,kernel="linear",cost=10,scale=F)
sent.svm <- svm(Sent~ ., sent_data,kernel="linear",cost=10,scale=F)
plot(sent.svm)
sent.svm$SV
set.seed (1)
x=matrix (rnorm (20*2) , ncol =2)
y=c(rep (-1,10) , rep (1 ,10) )
x[y==1 ,]= x[y==1,] + 1
plot(x, col =(3-y))
dat=data.frame(x=x, y=as.factor (y))
dat=data.frame(x=x, y=as.factor (y))
library (e1071)
svmfit =svm(yâˆ¼., data=dat , kernel =" linear ", cost =10,
scale =FALSE )
svmfit =svm(y~., data=dat , kernel =" linear ", cost =10,scale =FALSE )
svmfit =svm(y~., data=dat , kernel ="linear", cost =10,scale =FALSE )
plot(svmfit,dat)
plot(sent.svm,sent_data)
sent_data
sent.svm <- svm(Sent~ ., sent_data,kernel="linear",cost=10,scale=F)
plot(sent.svm,sent_data)
dat
sent.svm
data(housetasks)
install.packages(c("FactoMineR", "factoextra"))
library("FactoMineR")
library("factoextra")
data(housetasks)
housetasks
library("gplots")
dt <- as.table(as.matrix(housetasks))
dt
as.matrix(housetasks)
dt <- as.table(as.matrix(housetasks))
dt
# 2. Graph
balloonplot(t(dt), main ="housetasks", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
CA(X, ncp = 5, graph = TRUE)
CA(housetasks, graph = TRUE)
par(mfrow=c(1,1))
CA(housetasks, graph = TRUE)
res.ca <- CA(housetasks, graph = FALSE)
print(res.ca)
library("factoextra")
eig.val <- get_eigenvalue(res.ca)
eig.val
res.ca <- CA(housetasks, ncp=5, graph = FALSE)
print(res.ca)
eig.val <- get_eigenvalue(res.ca)
eig.val
res.ca <- CA(housetasks, graph = FALSE)
print(res.ca)
eig.val <- get_eigenvalue(res.ca)
eig.val
res.ca <- CA(housetasks, ncp = 6, graph = FALSE)
print(res.ca)
eig.val <- get_eigenvalue(res.ca)
eig.val
res.ca <- CA(housetasks, ncp = 6, graph = T)
res.ca
res.ca$eig
res.ca <- CA(housetasks, ncp = 1, graph = T)
res.ca$
print(res.ca)
res.ca$eig
res.ca
res.ca <- CA(housetasks, graph = T)
res.ca
fviz_screeplot(res.ca, addlabels = TRUE, ylim = c(0, 50))
eig.val
fviz_screeplot(res.ca) +
geom_hline(yintercept=33.33, linetype=2, color="red")
housetasks
res.desc <- dimdesc(res.ca, axes = c(1,2))
res.desc
res.desc[[2]]
res.desc[[1]]
res.desc[[2]]
res.ca <- CA (children, row.sup = 15:18, col.sup = 6:8,graph=F)
data(children)
res.ca <- CA (children, row.sup = 15:18, col.sup = 6:8,graph=F)
res.ca
eig.val(res.ca)
res.ca$eig
res.ca <- CA (children, row.sup = 15:18, col.sup = 6:8,graph=F,ncp = 2)
res.ca$eig
dir()
dir("..")
getwd()
dir()
dir("c:/Users/Bilgi/Desktop/")
getwd()
dir("../Desktop/ML/data/")
# relative
# "C:/Users/Bilgi/Documents"
dir("../Desktop/ML/readingdata/")
### Reading txt ###
europe <- read.table("../Desktop/ML/readingdata/europe.txt")
### Reading txt ###
europe <- read.table("../Desktop/ML/readingdata/europe.txt",T,';')
europe
europe <- read.table(file="../Desktop/ML/readingdata/europe.txt",sep=";",header=T)
europe
europe <- read.table(file="../Desktop/ML/readingdata/europe.txt",sep=",",header=T)
europe
europe <- read.table(file="../Desktop/ML/readingdata/europe.txt",sep=";",header=T)
head(europe)
### Reading csv ###
default <- read.csv("../Desktop/ML/readingdata/default.csv",T,';')
default
### Reading csv ###
default <- read.csv("../Desktop/ML/readingdata/default.csv")
### Reading csv ###
default <- read.csv("../Desktop/ML/readingdata/football.csv")
default
### Reading csv ###
football <- read.csv("../Desktop/ML/readingdata/football.csv")
football
default  <- read.csv("../Desktop/ML/readingdata/default.csv")
default
default  <- read.csv("../Desktop/ML/readingdata/default.csv",sep='|')
default
football
head(football)
setwd("../Desktop/ML/")
getwd()
# "C:/Users/Bilgi/Desktop/ML"
football <- read.csv("readingdata/football.csv")
default  <- read.csv("readingdata/default.csv",sep='|')
default
# "C:/Users/Bilgi/Desktop/ML"
football <- read.csv("readingdata/football.csv")
# "C:/Users/Bilgi/Desktop/ML"
football <- read.csv("readingdata/football.csv")
for(i in 1:10){
print(i)
}
for(x in 1:10){
x^2
}
for(x in 1:10){
print(x^2)
}
