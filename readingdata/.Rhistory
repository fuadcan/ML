mean(( pred.forst -test_boston$medv)^2)
mean(( pred.forest -test_boston$medv)^2)
forest.boston
mean(( pred.forest -test_boston$medv)^2)
importance(forest.boston)
forest.boston
forest.boston$importance
varImpPlot(forest.boston)
forest.boston$importance
# Boosting
install.packages("gbm")
# Boosting
library("gbm")
boost.boston <- gbm(medv~.,data = train_boston, distribution = 'gaussian',ntrees=5000, interaction.depth = 4)
boost.boston <- gbm(medv~.,data = train_boston, distribution = 'gaussian',n.trees=5000, interaction.depth = 4)
summary(boost.boston)
par(mfrow =c(1,2))
plot(boost.boston ,i="rm")
plot(boost.boston ,i=" lstat ")
plot(boost.boston ,i="lstat")
preds.boost <- predict(boost.boston, test_boston)
preds.boost <- predict(boost.boston, test_boston,n.trees = 5000)
mean((preds-test_boston$medv)^2)
mean(( pred.forest -test_boston$medv)^2)
preds.bag <- predict(bag.boston,test_boston)
plot(preds,test_boston$medv)
mean((preds-test_boston$medv)^2) # model estimates with around $5000 error
mean((preds.boost-test_boston$medv)^2)
pred.forest
boost.boston <- gbm(medv~.,data = train_boston, distribution = 'gaussian',n.trees=5000, interaction.depth = 4,shrinkage = .2)
summary(boost.boston)
boost.boston
boost.boston$shrinkage
boost.boston <- gbm(medv~.,data = train_boston, distribution = 'gaussian',n.trees=5000, interaction.depth = 4)
boost.boston$shrinkage
boost.boston <- gbm(medv~.,data = train_boston, distribution = 'gaussian',n.trees=5000, interaction.depth = 4,shrinkage = .2)
plot(boost.boston ,i="rm")
plot(boost.boston ,i="lstat")
preds.boost <- predict(boost.boston, test_boston,n.trees = 5000)
mean((preds.boost-test_boston$medv)^2)
boost.boston <- gbm(medv~.,data = train_boston, distribution = 'gaussian',n.trees=5000, interaction.depth = 4)
preds.boost <- predict(boost.boston, test_boston,n.trees = 5000)
mean((preds.boost-test_boston$medv)^2)
length(test_boston)
dim(test_boston)
install.packages("e1071")
library("e1071")
sent_data
svm(Sent~ ., sent_data,kernel="linear",cost=10,scale=F)
sent.svm <- svm(Sent~ ., sent_data,kernel="linear",cost=10,scale=F)
plot(sent.svm)
sent.svm$SV
set.seed (1)
x=matrix (rnorm (20*2) , ncol =2)
y=c(rep (-1,10) , rep (1 ,10) )
x[y==1 ,]= x[y==1,] + 1
plot(x, col =(3-y))
dat=data.frame(x=x, y=as.factor (y))
dat=data.frame(x=x, y=as.factor (y))
library (e1071)
svmfit =svm(yâˆ¼., data=dat , kernel =" linear ", cost =10,
scale =FALSE )
svmfit =svm(y~., data=dat , kernel =" linear ", cost =10,scale =FALSE )
svmfit =svm(y~., data=dat , kernel ="linear", cost =10,scale =FALSE )
plot(svmfit,dat)
plot(sent.svm,sent_data)
sent_data
sent.svm <- svm(Sent~ ., sent_data,kernel="linear",cost=10,scale=F)
plot(sent.svm,sent_data)
dat
sent.svm
data(housetasks)
install.packages(c("FactoMineR", "factoextra"))
library("FactoMineR")
library("factoextra")
data(housetasks)
housetasks
library("gplots")
dt <- as.table(as.matrix(housetasks))
dt
as.matrix(housetasks)
dt <- as.table(as.matrix(housetasks))
dt
# 2. Graph
balloonplot(t(dt), main ="housetasks", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
CA(X, ncp = 5, graph = TRUE)
CA(housetasks, graph = TRUE)
par(mfrow=c(1,1))
CA(housetasks, graph = TRUE)
res.ca <- CA(housetasks, graph = FALSE)
print(res.ca)
library("factoextra")
eig.val <- get_eigenvalue(res.ca)
eig.val
res.ca <- CA(housetasks, ncp=5, graph = FALSE)
print(res.ca)
eig.val <- get_eigenvalue(res.ca)
eig.val
res.ca <- CA(housetasks, graph = FALSE)
print(res.ca)
eig.val <- get_eigenvalue(res.ca)
eig.val
res.ca <- CA(housetasks, ncp = 6, graph = FALSE)
print(res.ca)
eig.val <- get_eigenvalue(res.ca)
eig.val
res.ca <- CA(housetasks, ncp = 6, graph = T)
res.ca
res.ca$eig
res.ca <- CA(housetasks, ncp = 1, graph = T)
res.ca$
print(res.ca)
res.ca$eig
res.ca
res.ca <- CA(housetasks, graph = T)
res.ca
fviz_screeplot(res.ca, addlabels = TRUE, ylim = c(0, 50))
eig.val
fviz_screeplot(res.ca) +
geom_hline(yintercept=33.33, linetype=2, color="red")
housetasks
res.desc <- dimdesc(res.ca, axes = c(1,2))
res.desc
res.desc[[2]]
res.desc[[1]]
res.desc[[2]]
res.ca <- CA (children, row.sup = 15:18, col.sup = 6:8,graph=F)
data(children)
res.ca <- CA (children, row.sup = 15:18, col.sup = 6:8,graph=F)
res.ca
eig.val(res.ca)
res.ca$eig
res.ca <- CA (children, row.sup = 15:18, col.sup = 6:8,graph=F,ncp = 2)
res.ca$eig
library(ISLR)
source("utils.R")
setwd("E:/")
library(ISLR)
source("utils.R")
source("utils.R")
setwd("E:/ML/")
source("utils.R")
head(Smarket)
pairs(Smarket)
dim(Smarket)
summary(Smarket)
cor(Smarket[-9])
plot(Smarket$Volume)
#### Read default.xlsx
Default <- data.frame(readxl::read_excel("readingdata/default.xlsx"))
Default$default <- as.factor(Default$default)
Default$student <- as.factor(Default$student)
Default
head(Default)
p <- ggplot(Default,aes(income,balance,color=default))
library(ggplot2)
p <- ggplot(Default,aes(income,balance,color=default))
p <- p + geom_point()
p
# Split data into test and train #
Default_Yes <- Default[Default$default == 'Yes',]
Default_No  <- Default[Default$default == 'No',][1:333,]
Default     <- rbind(Default_Yes,Default_No)
rm(Default_Yes,Default_No)
p <- ggplot(Default,aes(income,balance,color=default))
p <- p + geom_point()
p
p <- ggplot(Default,aes(income,balance,color=default))
p <- p + geom_point() + ggtitle("Defaulted Loans")
p <- ggplot(Default,aes(income,balance,color=default))
p + geom_point() + ggtitle("Defaulted Loans")
p + scale_color_manual(values=c("#999999", "#E69F00"))
p <- ggplot(Default,aes(income,balance,color=default))
p <- p + geom_point() + ggtitle("Defaulted Loans")
p + scale_color_manual(values=c("#999999", "#E69F00"))
p + scale_color_manual(values=c("blue", "red"))
ggplot(Auto,aes(weight,mpg)) + geom_point()
pl <- ggplot(Auto,aes(weight,mpg))
pl
pl <- pl  + geom_point()
pl
pl <- ggtitle("MPG vs Weight")
pl
pl <- pl  + ggtitle("MPG vs Weight")
pl <- ggplot(Auto,aes(weight,mpg))
pl <- pl  + geom_point()
pl <- pl  + ggtitle("MPG vs Weight")
pl
## 2 ##
pl <- ggplot(Auto,aes(weight,mpg,color=horsepower))
pl <- pl + geom_point() + ggtitle("MPG ve Weight")
pred <- predict(lm(mpg~weight+I(weight^2),data=Auto))
pl <- pl + geom_line(aes(y=pred),color='black')
pl
brand <- Auto$name
brand <- strsplit(as.character(brand)," ")
brand <- sapply(brand, function(elem) elem[[1]])
Auto$brand <- brand
brand
## 3 ##
pl <- ggplot(Auto,aes(horsepower,mpg,color=brand))
pl <- pl + geom_point() + ggtitle("MPG ve BG")
pred <- predict(lm(mpg~horsepower+I(horsepower^2),data=Auto))
pl <- pl + geom_line(aes(y=pred),color='black')
pl
mtcars
## 1 ##
p <- plot_ly(data= Auto, y= ~mpg, x=~weight)
#### Plotly ####
library("plotly")
## 1 ##
p <- plot_ly(data= Auto, y= ~mpg, x=~weight)
p
p <- layout(p,title = 'Styled Scatter')
p
p
p <- plot_ly(data= Auto, y= ~mpg, x=~weight,
marker = list(size = 10,
color = 'red',
line = list(color = 'orange',
width = 2)))
p <- layout(p,title = 'Styled Scatter')
## 3 ##
p <- plot_ly(data= Auto, y= ~mpg, x=~weight, color=~horsepower)
p
## 4 ##
p <- plot_ly(data= Auto, y= ~mpg, x=~weight, color=~horsepower,size=~weight)
p <- layout(p,title = 'Styled Scatter')
p
## 5 ##
preds <- predict(lm(mpg ~ poly(weight,3),data = Auto))
p <- plot_ly(data= Auto, x=~weight)
p
p <- layout(p,title = 'MPG vs Weight')
p
p <- add_markers(p,y = ~mpg, text = brand, showlegend = FALSE)
p
p <- plot_ly(data= Auto
)
p
p <- layout(p,title = 'MPG vs Weight')
p <- add_markers(p,y = ~mpg, x=~weight,text = brand, showlegend = FALSE)
p
p <- plot_ly(data= Auto, x=~weight)
p <- layout(p,title = 'MPG vs Weight')
p <- add_markers(p,y = ~mpg, x=~weight,text = brand, showlegend = FALSE)
p
p <- plot_ly(data= Auto)
p <- layout(p,title = 'MPG vs Weight')
p <- add_markers(p,y = ~mpg, x=~weight,text = brand, showlegend = FALSE)
p
p <- add_lines(p, y = preds,name="Cubic")
p
p <- add_lines(p, y = preds, x=~weightname="Cubic")
p <- plot_ly(data= Auto)
p <- layout(p,title = 'MPG vs Weight')
p <- add_markers(p,y = ~mpg, x=~weight,text = brand, showlegend = FALSE)
p <- add_lines(p, y = preds, x=~weight, name="Cubic")
p
## 5 ##
preds <- predict(lm(mpg ~ poly(weight,3),data = Auto))
p <- plot_ly(data= Auto)
p <- layout(p,title = 'MPG vs Weight')
p <- add_markers(p,y = ~mpg, x=~weight, color <- ~horsepower, text = brand, showlegend = FALSE)
p
## 5 ##
preds <- predict(lm(mpg ~ poly(weight,3),data = Auto))
p <- plot_ly(data= Auto)
p <- layout(p,title = 'MPG vs Weight')
p <- add_markers(p,y = ~mpg, x=~weight, color = ~horsepower, text = brand, showlegend = FALSE)
p
p <- add_lines(p, y = preds, x=~weight, name="Cubic")
p
## 1 ##
p <- plot_ly(data= Auto, y= ~mpg, x=~weight)
p <- layout(p,title = 'Mpg vs Weight')
p
p
## 2 ##
p <- plot_ly(data= Auto, y= ~mpg, x=~weight,
marker = list(size = 10,
color = 'red',
line = list(color = 'orange',
width = 2)))
p <- layout(p,title = 'Mpg vs Weight')
p
## 5 ##
preds <- predict(lm(mpg ~ poly(weight,3),data = Auto))
p <- plot_ly(data= Auto)
p <- layout(p,title = 'MPG vs Weight')
p <- add_markers(p,y = ~mpg, x=~weight, marker = list(size = 10,
color = 'red',
width = 2), text = brand, showlegend = FALSE)
p
## 5 ##
preds <- predict(lm(mpg ~ poly(weight,3),data = Auto))
p <- plot_ly(data= Auto)
p <- layout(p,title = 'MPG vs Weight')
p <- add_markers(p,y = ~mpg, x=~weight, marker = list(size = 10,
color = 'red',
line = list(color = 'orange',
width = 2), text = brand, showlegend = FALSE))
p
p <- add_lines(p, y = preds, x=~weight, name="Cubic")
p
p <- add_lines(p, y = preds, x=~weight, name="Cubic",color='black')
p
## 5 ##
preds <- predict(lm(mpg ~ poly(weight,3),data = Auto))
p <- layout(p,title = 'MPG vs Weight')
p <- add_markers(p,y = ~mpg, x=~weight, marker = list(size = 10,
color = 'red',
line = list(color = 'orange',
width = 2), text = brand, showlegend = FALSE))
p <- plot_ly(data= Auto)
p <- add_lines(p, y = preds, x=~weight, name="Cubic",color='black')
p
p <- add_lines(p, y = preds, x=~weight, name="Cubic",line=list(color='black'))
p <- plot_ly(data= Auto)
p <- layout(p,title = 'MPG vs Weight')
p <- add_markers(p,y = ~mpg, x=~weight, marker = list(size = 10,
color = 'red',
line = list(color = 'orange',
width = 2), text = brand, showlegend = FALSE))
p <- add_lines(p, y = preds, x=~weight, name="Cubic",line=list(color='black'))
p
## 2 ##
p <- plot_ly(data= Auto, y= ~mpg, x=~weight,
marker = list(size = 10,
color = 'red',
line = list(color = 'orange',
width = 2)))
p <- add_markers(p,y = ~mpg, x=~weight, text = brand, showlegend = FALSE)
p <- layout(p,title = 'Mpg vs Weight')
p
p <- add_markers(p,y = ~mpg, x=~weight, text = brand, showlegend = T)
p
## 2 ##
p <- plot_ly(data= Auto, y= ~mpg, x=~weight,
marker = list(size = 10,
color = 'red',
line = list(color = 'orange',
width = 2)))
p <- add_markers(p,y = ~mpg, x=~weight, text = brand, showlegend = T)
p
## 1 ##
p <- plot_ly(data= Auto, y= ~mpg, x=~weight)
p <- layout(p,title = 'Mpg vs Weight')
p
## 2 ##
p <- plot_ly(data= Auto, y= ~mpg, x=~weight,
marker = list(size = 10,
color = 'red',
line = list(color = 'orange',
width = 2)))
p <- add_markers(p, text = brand, showlegend = T)
p
## 2 ##
p <- plot_ly(data= Auto, y= ~mpg, x=~weight,
marker = list(size = 10,
color = 'red',
line = list(color = 'orange',
width = 2)))
p <- add_markers(p, text = brand)
p
## 3 ##
p <- plot_ly(data= Auto, y= ~mpg, x=~weight, color=~horsepower)
p
## 3 ##
p <- plot_ly(data= Auto, y= ~mpg, x=~weight, color=~horsepower) %>%
add_markers(text = brand) %>%
layout(p,title = 'Mpg vs Weight')
p
p <- plot_ly(data= Auto, y= ~mpg, x=~weight, color=~horsepower,size=~weight) %>%
add_markers(text = brand) %>%
layout(p,title = 'MPG vs Weight')
p
p <- plot_ly(data= Auto, y= ~mpg, x=~weight, color=~horsepower)
p <- add_markers(p,text = brand)
layout(p,title = 'Mpg vs Weight')
## 4 ##
p <- plot_ly(data= Auto, y= ~mpg, x=~weight, color=~horsepower,size=~weight) %>%
add_markers(text = brand) %>%
layout(title = 'MPG vs Weight')
## 5 ##
preds <- predict(lm(mpg ~ poly(weight,3),data = Auto))
p
## 5 ##
preds <- predict(lm(mpg ~ poly(weight,3),data = Auto))
p <- plot_ly(data= Auto) %>%
layout(p,title = 'MPG vs Weight') %>%
add_markers(p,y = ~mpg, x=~weight, text = brand) %>%
add_lines(y = preds, x=~weight, name="Cubic",line=list(color='black'))
p <- plot_ly(data= Auto) %>%
layout(p,title = 'MPG vs Weight') %>%
add_markers(y = ~mpg, x=~weight, text = brand) %>%
add_lines(y = preds, x=~weight, name="Cubic",line=list(color='black'))
p
brand
## 5 ##
preds <- predict(lm(mpg ~ poly(weight,3),data = Auto))
p <- plot_ly(data= Auto) %>%
layout(p,title = 'MPG vs Weight') %>%
add_markers(y = ~mpg, x=~weight) %>%
add_lines(y = preds, x=~weight, name="Cubic",line=list(color='black'))
p
p <- plot_ly(data= Auto) %>%
layout(p,title = 'MPG vs Weight') %>%
add_markers(y = ~mpg, x=~weight, name = 'Cars') %>%
add_lines(y = preds, x=~weight, name="Cubic",line=list(color='black'))
p
## 6 ##
preds <- predict(lm(mpg ~ poly(weight,3),data = Auto))
p <- plot_ly(data= Auto, x=~weight)
p <- layout(p,title = 'MPG vs Weight')
p <- add_markers(p,y = ~mpg, text = brand, showlegend = FALSE,color=~horsepower)
p <- add_lines(p, y = preds,name="Cubic",line = list(color = '#07A4B5'))
p
## 6 ##
preds <- predict(lm(mpg ~ poly(weight,3),data = Auto))
p <- plot_ly(data= Auto, x=~weight)
p <- layout(p,title = 'MPG vs Weight')
p <- add_markers(p,y = ~mpg, name = brand, showlegend = FALSE,color=~horsepower)
p <- add_lines(p, y = preds,name="Cubic",line = list(color = '#07A4B5'))
p
## 6 ##
preds <- predict(lm(mpg ~ poly(weight,3),data = Auto))
p <- plot_ly(data= Auto, x=~weight)
p <- layout(p,title = 'MPG vs Weight')
p <- add_markers(p,y = ~mpg, name = brand, showlegend = FALSE,color=~brand)
p <- add_lines(p, y = preds,name="Cubic",line = list(color = '#07A4B5'))
p
## 6 ##
preds <- predict(lm(mpg ~ poly(weight,3),data = Auto))
p <- plot_ly(data= Auto, x=~weight)
p <- layout(p,title = 'MPG vs Weight')
p <- add_markers(p,y = ~mpg, showlegend = FALSE,color=~brand)
p <- add_lines(p, y = preds,name="Cubic",line = list(color = '#07A4B5'))
p
p <- plot_ly(data= Auto, x=~weight)
p <- layout(p,title = 'MPG vs Weight')
p <- add_markers(p,y = ~mpg, showlegend = T,color=~brand)
p <- add_lines(p, y = preds,name="Cubic",line = list(color = '#07A4B5'))
p
## 7 ##
p <- plot_ly(data= Auto, x=~weight) %>%
layout(title = 'MPG vs Weight') %>%
add_markers(y = ~mpg, text = brand, showlegend = T,color=~mpg01,size=~weight) %>%
add_lines(y = preds,name="Cubic",line = list(color = 'Black'))
p
## 7 ##
p <- plot_ly(data= Auto, x=~weight) %>%
layout(title = 'MPG vs Weight') %>%
add_markers(y = ~mpg, text = brand, showlegend = T,color=~brand,size=~weight) %>%
add_lines(y = preds,name="Cubic",line = list(color = 'Black'))
p
## 7 ##
p <- plot_ly(data= Auto, x=~weight) %>%
layout(title = 'MPG vs Weight') %>%
add_markers(y = ~mpg, text = brand, showlegend = F,color=~brand,size=~weight) %>%
add_lines(y = preds,name="Cubic",line = list(color = 'Black'))
p
## 7 ##
p <- plot_ly(data= Auto, x=~weight) %>%
layout(title = 'MPG vs Weight') %>%
add_markers(y = ~mpg, text = brand, showlegend = F,color=~name,size=~weight) %>%
add_lines(y = preds,name="Cubic",line = list(color = 'Black'))
p
## 7 ##
p <- plot_ly(data= Auto, x=~weight) %>%
layout(title = 'MPG vs Weight') %>%
add_markers(y = ~mpg, text = brand, showlegend = F,color=~brand,size=~weight) %>%
add_lines(y = preds,name="Cubic",line = list(color = 'Black'))
p
######## GoogleVis #########
dat <- readxl::read_excel("data/penn.xlsx")
dat <- data.frame(dat)
dat
######## GoogleVis #########
library(googleVis)
gvisMotionChart(dat)
head(dat)
gvisMotionChart(dat,idvar='country',timevar = 'year')
M <- gvisMotionChart(dat,idvar='country',timevar = 'year')
plot(M)
plot(M)
plot(M,width=10,height=10)
dat <- data.frame(dat)
M <- gvisMotionChart(dat,idvar='country',timevar = 'year', options=list(height=800, width=1200))
plot(M)
getwd()
setwd("E:/ML")
getwd()
setwd("readingdata/")
europe <- read.table("europe.txt",header = T,sep=";")
head(europe)
class(europe)
europe <- data.matrix(europe)
class(europe)
setwd("readingdata/")
# football <- read.table("football.csv",header=T,sep=",")
football <- read.csv("football.csv")
#
head(europe)
class(europe)
europe <- data.matrix(europe)
class(europe)
##
# default <- read.csv("default.csv")
default <- read.csv("default.csv",sep='|')
default
